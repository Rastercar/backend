# Builds the base rust image to be used within services dockerfiles
# to build services images, for more info see the project root Dockerfile
name: Build rust services base image
on:
  push:
    branches:
      - homolog

    paths:
      # Trigger on changes to the base dependencies
      - "Cargo.lock"

      # Trigger on changes to the base dockerfile
      - "Dockerfile"

      # Trigger on changes in any src folder within services
      - "services/*/src/**"

      # Trigger on changes in any Dockerfile within services
      - "services/*/Dockerfile"

      # Trigger on changes in any Cargo.toml within services
      - "services/*/Cargo.toml"

jobs:
  check-base-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check if Base Image Needs Rebuilding
        id: base-image-check
        run: |
          if git diff --name-only HEAD~1 | grep -E "Cargo.lock|Dockerfile"; then
            echo "Base image needs rebuilding."
            echo "::set-output name=rebuild::true"
          else
            echo "Base image doesn't need rebuilding."
            echo "::set-output name=rebuild::false"
          fi

  build-base:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RUST_SERVICES_BASE_ECR_REPOSITORY: ${{ secrets.RUST_SERVICES_BASE_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f services/mailer/Dockerfile -t $ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:$IMAGE_TAG"
