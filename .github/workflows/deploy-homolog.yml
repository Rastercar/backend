# Builds the base rust image to be used within services dockerfiles
# to build services images, for more info see the project root Dockerfile
name: Build rust services base image
on:
  push:
    branches:
      - test

    # paths: /
    # # Trigger on changes to the base dependencies
    # - "Cargo.toml"
    # - "Cargo.lock"

    # # Trigger on changes to the base dockerfile
    # - "Dockerfile"

    # # Trigger on changes in any src folder within services
    # - "shared/*/src/**"
    # - "shared/Cargo.toml"

    # # Trigger on changes in any src folder within services
    # - "services/*/src/**"

    # # Trigger on changes in any Dockerfile within services
    # - "services/*/Dockerfile"

    # # Trigger on changes in any Cargo.toml within services
    # - "services/*/Cargo.toml"
    # - "services/*/Cargo.lock"

jobs:
  # set the MUST_REBUILD_BASE_IMAGE to true if the base image must be rebuild before
  # building the docker images of any service that depends on this base image
  check_base_image_needs_rebuilding:
    runs-on: ubuntu-latest
    outputs:
      must_rebuild: ${{ steps.run_script_check_base_image_needs_rebuild.outputs.must_rebuild }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check if Base Image Needs Rebuilding
        id: run_script_check_base_image_needs_rebuild
        run: |
          scripts/check-base-image-needs-rebuilding.sh
          echo "must_rebuild=$([ $? -eq 1 ] && echo "true" || echo "false")" >> "$GITHUB_OUTPUT"

  build-base-image:
    runs-on: ubuntu-latest
    needs: check_base_image_needs_rebuilding
    if: ${{ needs.check_base_image_needs_rebuilding.outputs.must_rebuild }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RUST_SERVICES_BASE_ECR_REPOSITORY: ${{ secrets.RUST_SERVICES_BASE_ECR_REPOSITORY }}
        run: |
          docker build -f services/mailer/Dockerfile -t $ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:latest"
