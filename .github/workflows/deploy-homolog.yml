# Builds the base rust image to be used within services dockerfiles
# to build services images, for more info see the project root Dockerfile
name: Deploy Homolog
on:
  push:
    branches:
      - test

jobs:
  # set build_base_image to true if the base image must be rebuild before
  # building the docker images of any service that depends on this base image
  check_images_that_need_building:
    name: Check base image needs to be built
    runs-on: ubuntu-latest
    outputs:
      build_base: ${{ steps.check_image.outputs.build }}
      build_mailer: ${{ steps.check_mailer.outputs.build }}
      build_decoder: ${{ steps.check_decoder.outputs.build }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # fetch the previous commit aswell so we can compare the changed files
          # and the check-base-image-needs-rebuilding.sh script can compare them
          fetch-depth: 2

      - name: Check if Base Image Needs Rebuilding
        id: check_image
        run: |
          scripts/check-base-image-needs-rebuilding.sh
          echo "build=$([ $? -eq 1 ] && echo "true" || echo "false")" >> "$GITHUB_OUTPUT"

      - name: Check mailer needs rebuilding
        id: check_mailer
        run: |
          scripts/check-some-file-in-folder-has-changed.sh /services/mailer
          echo "build=$([ $? -eq 1 ] && echo "true" || echo "false")" >> "$GITHUB_OUTPUT"

      - name: Check decoder needs rebuilding
        id: check_decoder
        run: |
          scripts/check-some-file-in-folder-has-changed.sh /services/decoder
          echo "build=$([ $? -eq 1 ] && echo "true" || echo "false")" >> "$GITHUB_OUTPUT"

  # builds and uploads the base image needed for building the services
  # we skip all steps if build_base_image !== true instead of skipping the whole job
  # so services builds can depend on this job and assure the base image has been built
  build_base_image:
    name: Build base image if needed
    runs-on: ubuntu-latest
    needs: check_images_that_need_building
    steps:
      - name: Checkout Code
        if: ${{ needs.check_images_that_need_building.outputs.build_base }} === 'true'
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ needs.check_images_that_need_building.outputs.build_base }} === 'true'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ needs.check_images_that_need_building.outputs.build_base }} === 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        if: ${{ needs.check_images_that_need_building.outputs.build_base }} === 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RUST_SERVICES_BASE_ECR_REPOSITORY: ${{ secrets.RUST_SERVICES_BASE_ECR_REPOSITORY }}
        run: |
          docker build -t $ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$RUST_SERVICES_BASE_ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  # deploy the mailer service
  deploy-mailer:
    runs-on: ubuntu-latest
    if: ${{ needs.check_images_that_need_building.outputs.build_mailer }} === 'true'
    needs: ["check_images_that_need_building", "build_base_image"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: "Cache cargo"
        uses: "actions/cache@v4"
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          MAILER_ECR_REPOSITORY: ${{ secrets.MAILER_ECR_REPOSITORY }}
        run: |
          docker build -f services/mailer/Dockerfile -t $ECR_REGISTRY/$MAILER_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$MAILER_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$MAILER_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --region ${{ secrets.AWS_REGION }} --task-definition mailer-homolog --query taskDefinition > task-definition.json

      - name: Fill in new image ID in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          image: ${{ steps.build-image.outputs.image }}
          container-name: mailer
          task-definition: task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: ${{ secrets.MAILER_ECS_HOMOLOG_SERVICE }}
          cluster: ${{ secrets.ECS_HOMOLOG_CLUSTER }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
